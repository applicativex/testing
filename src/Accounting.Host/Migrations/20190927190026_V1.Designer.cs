// <auto-generated />
using System;
using Accounting.Host;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Accounting.Host.Migrations
{
    [DbContext(typeof(AccountingContext))]
    [Migration("20190927190026_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Accounting.Host.AccountData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Currency");

                    b.Property<Guid>("UserAccountId");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Accounting.Host.AccountEntryData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<Guid>("AccountTransactionId");

                    b.Property<decimal>("Amount");

                    b.Property<DateTimeOffset>("Date");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountTransactionId")
                        .IsUnique();

                    b.ToTable("AccountEntries");
                });

            modelBuilder.Entity("Accounting.Host.AccountTransactionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("FromEntryId");

                    b.Property<Guid>("ToEntryId");

                    b.Property<DateTimeOffset>("TransactionDate");

                    b.Property<int>("TransactionType");

                    b.HasKey("Id");

                    b.HasIndex("FromEntryId")
                        .IsUnique();

                    b.HasIndex("ToEntryId")
                        .IsUnique();

                    b.ToTable("AccountTransactions");
                });

            modelBuilder.Entity("Accounting.Host.AccountEntryData", b =>
                {
                    b.HasOne("Accounting.Host.AccountData", "Account")
                        .WithMany("Entries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Accounting.Host.AccountTransactionData", "AccountTransaction")
                        .WithOne()
                        .HasForeignKey("Accounting.Host.AccountEntryData", "AccountTransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Accounting.Host.AccountTransactionData", b =>
                {
                    b.HasOne("Accounting.Host.AccountEntryData")
                        .WithOne()
                        .HasForeignKey("Accounting.Host.AccountTransactionData", "FromEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Accounting.Host.AccountEntryData")
                        .WithOne()
                        .HasForeignKey("Accounting.Host.AccountTransactionData", "ToEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
